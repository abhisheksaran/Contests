
#include <iostream>
#include<string>
#include<vector>

using namespace std;

int main() {
	int n,m;
	cin >> n>>m;
	string str;
	vector<int> s;                                                      //store all the positions where s comes
	int a[m*n]={0};                                                     // binary array to store positons where a appears
	int b[m*n]={0};
	
	for(int i=0;i<n;i++){
	    cin>>str;
	    for(int j=0;j<m;j++)                                             //filing the index values from n*m matrix
	    {
	        if(str[j]=='s')
	        s.push_back(i*m+j);
	        else if(str[j]=='a')
	        a[i*m+j]=1;
	        else if(str[j]=='b')
	        b[i*m+j]=1;
	    }
	}
	int ans=0;								//intializing answer to 0
	for(int i=0;i<s.size();i++)						//for each positions of s
	{
	    int x=s.at(i);
	    if((m-x%m-1)<3&&(x+3*m<m*n)){					//condition for only vertical saba 
	        if(a[x+m]==1&&a[x+3*m]==1&&b[x+2*m]==1)
	        {
	            ans++;
	        }
	        
	    }
	    else if((m-x%m-1)>=3&&(x+3*m>=m*n))					//condition for only horizontal saba 
	    {
	        if(a[x+1]==1&&a[x+3]==1&&b[x+2]==1)
	        {
	            ans++;
	        }
	        
	    }
	    else if((m-x%m-1)>=3&&(x+3*m<m*n))					//conditions where horizontal, vertical, diagonal downwards saba is possible
	    {
	        if(a[x+1]==1&&a[x+3]==1&&b[x+2]==1)
	        {
	            ans++;
	        }
	        if(a[x+m]==1&&a[x+3*m]==1&&b[x+2*m]==1)
	        {
	            ans++;
	        }
	        if(a[x+m+1]==1&&a[x+3*m+3]==1&&b[x+2*m+2]==1)
	        {
	            ans++;
	        }
	        
	    }
	    if(x/m>=3&&(m-x%m-1)>=3)						//condition for diagonal upward possibility of saba
	    {   int z=x/m;
	        if(a[m*(z-1)+(x%m+1)]==1&&a[m*(z-3)+(x%m+3)]==1&&b[m*(z-2)+(x%m+2)]==1)
	        {
	            ans++;
	        }
	    }
	}
	cout<<ans;
	return 0;
}

